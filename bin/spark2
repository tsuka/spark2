#!/usr/bin/env node

/*!
 * Sencha Spark
 * Copyright(c) 2010 Sencha Inc.
 * MIT Licensed
 */

/**
 * Module dependencies.
 */

var child_process = require('child_process'),
    netBinding = process.binding('net'),
    dirname = require('path').dirname,
    exists = require('path').existsSync,
    http = require('http'),
    util = require(process.binding('natives').util ? 'util' : 'sys'),
    fs = require('fs'),
    cwd = process.cwd(),
    net = require('net'),
    data = {
        start: null,
        children: 0,
        errors: []
    };


/**
 * Coffee script support
 * Try to require coffee script, ignore if it fails.
 */
var coffee_script;
try { coffee_script = require('coffee-script') } catch (e) {}


/**
 * Framework version.
 */

var showVersion = function() {
    var path = require('path');
    var json = path.join(__dirname, '../', 'package.json');
    json = fs.readFileSync(json, encoding='utf8');
    json = JSON.parse(json);
    abort(json.version);
}

/**
 * Process comment.
 */

var comment;

/**
 * Use child process workers to utilize all cores
 */

var workers = 1;

/**
 * Verbose output.
 */

var verbose;

var respawn;
var kill;
var force;
var status;
var spawn;
var pidfile;
var accesslog;
var watch;
var debugApp;

/**
 * Colored terminal output.
 */

var useColors = true;

/**
 * Environment defaults.
 */

var env = process.sparkEnv = {
    name: process.env.NODE_ENV || 'development',
    port: 3000,
    host: null
};

/**
 * Usage documentation.
 */

var usage = ''
    + '[bold]{Usage}: spark2 [options]\n'
    + '\n'
    + '[bold]{Options}:\n'
    + '  --comment            Ignored, this is to label the process in htop\n'
    + '  -H, --host ADDR      Host IP address, defaults to INADDR_ANY\n'
    + '  -p, --port NUM       Port number, defaults to 3000\n'
    + '  --ssl-key PATH       SSL key file\n'
    + '  --ssl-crt PATH       SSL certificate file\n'
    + '  -n, --workers NUM    Number of worker processes to spawn\n'
    + '  -I, --include PATH   Unshift the given path to require.paths\n'
    + '  --pidfile PATH       Use this file as the tmp pidfile\n'
    + '  --accesslog PATH     Use this file to write stdout (express.logger()) data\n'
    + '  -E, --env NAME       Set environment, defaults to "development"\n'
    + '  -M, --mode NAME      Alias of -E, --env\n'
    + '  -e, --eval CODE      Evaluate the given string\n'
    + '  -C, --chdir PATH     Change to the given path\n'
    + '  -c, --config PATH    Load configuration module\n'
    + '  -u, --user ID|NAME   Change user with setuid()\n'
    + '  -g, --group ID|NAME  Change group with setgid()\n'
    + '  -v, --verbose        Enable verbose output\n'
    + '  -V, --version        Output spark2 version\n'
    + '  -D, --debug          Enable debug mode on app child process\n'
    + '  -K, --no-color       Suppress colored terminal output\n'
    + '  -h, --help           Outputy help information\n'
    + '  --ENV VAL            Sets the given spark2 environment variable\n'
    + '  --kill               Kill the currently running server\n'
    + '  --respawn            Restart all workers on the currently running server\n'
    + '  --force              Kill the lock file on the current server and start\n'
    + '  --watch              Watch the app file and restart workers if the file size or mtime changes\n'
    + '  --status             Report status information about this spark2 process\n'
    ;

/**
 * Log the given msg to stderr.
 *
 * @param  {String} msg
 */

function log(msg) {
    if (verbose) util.error('... ' + colorize(msg));
}

/**
 * Colorize the given string when color is enabled,
 * otherwise strip placeholders.
 *
 * @param  {String} str
 * @return {String}
 */

function colorize(str) {
    var colors = useColors
        ? { bold: 1 }
        : {};
    str = str+'';
    return str.replace(/\[(\w+)\]\{([^}]+)\}/g, function(_, color, str){
        return '\x1B[' + colors[color] + 'm' + str +'\x1B[0m';
    });
}

/**
 * Strip ".js" extension from the given path.
 *
 * @param {String} path
 * @return {String}
 */

function modulePath(path){
    return path.replace(/\.js$/, '');
}

/**
 * Exit with the given message.
 *
 * @param  {String} msg
 * @param  {Number} code
 */

function abort(msg, code) {
    util.error(colorize(msg));
    process.exit(code || 1);
}

/**
 * Load the given configuration file.
 *
 * @param  {String} file
 */

function loadConfig(file) {
    if (file[0] !== '/') {
        file = process.cwd() + '/' + file;
    }
    log('loading config [bold]{`' + file + "'}");
    var args = [],
        config = require(file);
    for (var key in config) {
        var val = config[key] instanceof Array
                ? config[key]
                : [config[key]];

        // Prefix flag
        var key = '--' + key;

        // Apply flags
        val.forEach(function(val){
            log('  ' + key + ' ' + (val === true ? '' : util.inspect(val)));
            args.push(key);
            if (typeof val !== 'boolean') {
                args.push(val);
            }
            if (key === '--watch') {
                if (val && typeof val === 'boolean') {
                    args.push(cwd);
                }
            }
        });
    }
    //Remove the config key from the arguments..
    var args2 = process.argv.slice(2);
    args.forEach(function(v, k) {
        if (v === '--config') {
            args.splice(k, 2);
        }
    });
    args2.forEach(function(v, k) {
        if (v === '--config') {
            args2.splice(k, 2);
        }
    });

    if (args.length) { parseArguments(args); };
    if (args2.length) { parseArguments(args2); };
}




/**
 * Require application module at the given path,
 * which must be an instanceof net.Server, otherwise
 * abort.
 *
 * @param  {String} path
 * @return {Server}
 */

function requireApp(path) {
    var app = require(path);
    try {
        if (app instanceof net.Server) {
            return app;
        } else {
            throw new Error('invalid server');
        }
    } catch (err) {
        abort("invalid application.\n"
            + "at: `" + path + "'\n"
            + "must export a , ex: `module.exports = http.createServer(...);'\n");
    }
}

/**
 * Get path to application.
 *
 *  - supports env.appPath
 *  - auto-detects {app,server}.js
 *
 * @return {String}
 */

function getAppPath(inc) {
    var path = (env.appPath || '');
    if (path[0] !== '/') {
        path = process.cwd() + '/' + path;
    }

    // App path not given, try app.js and server.js
    if (!env.appPath) {
        if (exists(path + 'app.js')) {
            log('detected app.js');
            path += 'app';
            if (inc) { path += '.js'; }
        } else if (exists(path + 'server.js')) {
            log('detected server.js');
            path += 'server';
            if (inc) { path += '.js'; }
        } else if (coffee_script && exists(path + 'app.coffee')) {
            log('detected app.coffee');
            path += 'app';
            if (inc) { path += '.coffee'; }
        } else if (coffee_script && exists(path + 'server.coffee')) {
            log('detected server.coffee');
            path += 'server';
            if (inc) { path += '.coffee'; }
        } else {
            abort('app not found, pass a module path, or create {app,server}.{js,coffee}');
        }
    }

    return path;
}

/**
 * Enable SSL for app if desired
 */

function enableSSL(app, env) {
    if (env.sslKey) {
        var crypto = require('crypto');
        app.setSecure(crypto.createCredentials({
            key: env.sslKey,
            cert: env.sslCrt
        }));
    }
}

function changeUser() {
  // user / group
  if (env.gid) {
      log('group [bold]{' + env.gid + '}');
      process.setgid(env.gid);
  }
  if (env.uid) {
      log('user [bold]{' + env.uid + '}');
      process.setuid(env.uid);
  }
}


/**
 * Start child worker process.
 */

function startWorker() {
    var stdin = new net.Stream(0, 'unix');
    stdin.addListener('data', function(json) {
        process.sparkEnv = env = JSON.parse(json.toString());
    });
    stdin.addListener('fd', function(fd){
        var app = requireApp(getAppPath());
        app.isChild = true;
        util.error('Spark2 server(' + process.pid + ') listening on '
            + 'http' + (env.sslKey ? 's' : '') + '://'
            + (env.host || '*') + ':' + env.port
            + ' in ' + env.name + ' mode');

        enableSSL(app, env);
        app.listenFD(fd);
    });
    stdin.resume();

}


function spawnChild() {
    data.children++;
    // Create an unnamed unix socket to pass the fd to the child.
    var fds = netBinding.socketpair();
    var sFds = [fds[1], fds[2], fds[3]];
    //var sFds = [-1, -1, -1];

    // Collect the child process arguments
    var args = [process.argv[1], '--child'];
    if (comment) {
        args.push('--comment', comment);
    }
    if (debugApp) {
        args.unshift('--debug');
    }

    // Spawn the child process
    var child = child_process.spawn(
        process.argv[0],
        args,
        undefined,
        sFds
    );

    log('child spawned [bold]{' + child.pid + '}');

    // For some reason stdin isn't getting set, patch it externally
    if (!child.stdin) {
        child.stdin = new net.Stream(fds[0], 'unix');
    }
    if (!child.stdout) {
        child.stdout = new net.Stream(fds[1], 'unix');
    }
    if (!child.stderr) {
        child.stderr = new net.Stream(fds[2], 'unix');
    }

    child.stdspark = new net.Stream(fds[3], 'unix');

    child.stdin.write(JSON.stringify(env), 'ascii', mainFD);
    child.stdout.addListener('data', function(d) {
        if (verbose) {
            util.print(d);
        }
        if (accesslog) {
            writeAccess(d);
        }
    });
    child.stderr.addListener('data', function(d) {
        if (verbose) {
            util.print(d);
        }
    });


    return child;
}

var aLog;

var writeAccess = function(data) {
    if (data) {
        if (!aLog) {
            aLog = fs.createWriteStream(accesslog, { flags: 'w+', encoding: 'ascii', mode: 0777 });
        }
        if (aLog) {
            aLog.write(data);
        }
    }
}

var childSig = function() {
    for (var i in children) {
        if (!children[i].pid) {
            log('Child Died (' + i + '), respawning...');
            children[i].stderr.destroy();
            children[i].stdout.destroy();
            children[i].stdin.destroy();
            children[i].stdspark.destroy();
            children[i].fds.forEach(function(i) {
                /**
                * This is a dirty, dirty hack.
                * It appears that if you create a child process with customFD's
                * The underlying code gives new file descriptors, but doesn't
                * give us access to them. It only gives us the # back.
                * So we have to walk through the file descriptors and create a new stream
                * then destroy that stream to get rid of the hanging descriptors
                * Or will will get this error
                * readpipe(): Too many open files
                */
                try {
                    var s = new net.Stream(i, 'unix');
                    s.destroy();
                } catch (e) {}
            });
            var c = spawnChild();
            delete children[i];
            children[c.pid] = c;
        }
    }
};

var respawnAll = function() {
    log('Respawning all children');
    for (var i in children) {
        children[i].kill('SIGTERM');
    }
}

var getTmpFile = function(path) {
    if (pidfile) {
        return pidfile;
    }
    path = path.replace(/\//g, '-').replace(/ /g, '');
    //path = process.pid +'';
    var tmpDir = process.env.TMPDIR;
    if (!tmpDir) {
        tmpDir = '/tmp/';
    }
    var file = tmpDir + 'spark2-' + path;
    return file;
}

var writePid = function(path) {
    var file = getTmpFile(path);
    fs.writeFile(file, process.pid+'', encoding='ascii');
}

var getMainPid = function(path) {
    return fs.readFileSync(getTmpFile(path));
}

var watchFile = function(cur, prev) {
    var reason;
    if (cur.size !== prev.size) {
        reason = 'Filesize is different';
    }
    if (cur.mtime.getTime() !== prev.mtime.getTime()) {
        reason = 'mtime is different';
    }
    if (reason) {
        log('File has changed (' + reason +  '), respawning... ');
        respawnAll();
    }
};

var children = {},
mainFD;

var showStatus = function(pid) {
    process.kill(pid, 'SIGUSR1');
    setTimeout(function() {
        var data = fs.readFileSync('./spark2-status.log', 'utf8');
        fs.unlinkSync('./spark2-status.log');
        console.log(data);
    }, 2000);
};

var showInternalStatus = function() {
    var lsof = require('lsof');
    var mem = process.memoryUsage();
    var str = [];
    lsof.counters(function(d) {
        str.push('------------------------------------------------------------------');
        str.push(' Showing status for spark2 process at: ' + process.pid);
        str.push('------------------------------------------------------------------');
        str.push('   Current children: ' + Object.keys(children).length);
        str.push('   Total # of spawned children: ' + data.children);
        str.push('   Total # of open FDs: ' + d.open);
        if (d.types.pipe) {
            str.push('   Total # of open pipes: ' + d.types.pipe);
        }
        if (d.types.fifo) {
            str.push('   Total # of open pipes(FIFO): ' + d.types.fifo);
        }
        str.push('   Started: ' + data.start);
        str.push('   Now    : ' + new Date());
        str.push('------------------------------------------------------------------');
        str.push(' Memory Usage');
        str.push('------------------------------------------------------------------');
        for (var i in mem) {
            str.push('  ' + i + ': ' + mem[i]);
        }
        str.push('------------------------------------------------------------------');
        str.push('');

        fs.writeFileSync('spark2-status.log', str.join('\n'), 'utf8');
    });
}

/**
 * Start the process.
 */

function start() {
    data.start = new Date();
    process.on('uncaughtException', function(e) {
        data.errors.push(e.message)
    });

    log('starting');

    // Detect config.js
    if (exists('./config.js')) {
        log('detected config.js');
        loadConfig('./config.js');
    }

    if (!workers) {
        abort('Must have at least one worker..');
    }

    // Application path
    var path = getAppPath();

    if (exists(getTmpFile(path))) {
        log(getTmpFile(path));
        if (status) {
            showStatus(parseInt(getMainPid(path)));
            return;
        }
        if (respawn || kill || force) {
            var pid = parseInt(getMainPid(path)),
                sig = 'SIGTERM';

            if (isNaN(pid)) {
                force = true;
            }

            if (respawn) {
                sig = 'SIGCONT';
            }
            if (force || kill) {
                fs.unlinkSync(getTmpFile(path));
                kill = true;
            }
            if (kill || respawn) {
                try {
                    process.kill(pid, sig);
                } catch (e) {}
            }
        } else {
            abort('PID already exists for this process.. Use spark2 {--kill , --respawn, --force, --status}');
        }
        if (!force) {
            return;
        }
    }

    // Spawn worker processes
    if (workers) {
        log('starting with (' + workers + ') workers');
        if (process.version < '0.1.98' && process.version > "0.1.199") {
            abort('Cannot use workers with a version older than v0.1.98');
        }

        var afNum = (netBinding.isIP(env.host) == 6) ? 6 : 4;
        if (env.host && (netBinding.isIP(env.host) === 0)) {
            throw new Error('--host must be an IP Address');
        }
        var fd = netBinding.socket('tcp' + afNum);
        netBinding.bind(fd, env.port, env.host);
        netBinding.listen(fd, 128);
        mainFD = fd;

        changeUser();

        for (var i = 0; i < workers; i++) {
            var c = spawnChild();
            children[c.pid] = c;
        }

        changeUser();

        // Forward signals to child processes, keeps the zombies at bay.
        ['SIGINT', 'SIGHUP', 'SIGTERM'].forEach(function(signal){
            process.addListener(signal, function() {
                fs.unlinkSync(getTmpFile(path));
                for (var c in children) {
                    try {
                        children[c].kill(signal);
                    } catch (err) {
                        // Ignore
                    }
                }
                process.exit();
            });
        });

        process.addListener('SIGCHLD', childSig);
        process.addListener('SIGCONT', respawnAll);
        process.addListener('SIGUSR1', showInternalStatus);

    }

    changeUser();

    if (watch) {
        var watchExts = ['js', 'coffee', 'tjs'];
        var cmd = 'find ' + watch + ' ' +
          watchExts.map(function(s){return "-name \"*." + s + "\""}).join(" -o ");
        log('find: ' + cmd);
        child_process.exec(cmd, function (error, out) {
            var files = out.trim().split("\n");
            files.forEach(function(file) {
                log('Watching file: ' + file);
                fs.watchFile(file, { interval: 100 }, watchFile);
            });
        });
    }
    writePid(path);
}

/**
 * Parse the arguments.
 */

function parseArguments(args, cmd) {
    var arg;

    /**
     * Return shifted argument, or
     * abort with the given prefix.
     *
     * @param  {String} prefix
     * @return {String}
     */

    function requireArg(prefix, def) {
        if (!args.length && def) {
            args.push(def);
        }
        if (args.length) {
            return args.shift();
        } else {
            abort(prefix + ' requires an argument.');
        }
    }

    // Iterate
    while (args.length) {
        switch (arg = args.shift()) {
            case '--watch':
                watch = requireArg('--watch', cwd);
                break;
            case '--status':
                status = true;
                break;
            case '--force':
                force = true;
                break;
            case '--kill':
                kill = true;
                break;
            case '-R':
            case '--respawn':
                respawn = true;
                break;
            case '--comment':
              comment = requireArg('--comment');
              break;
            case '-D':
            case '--debug':
              debugApp = true;
              break;
            case '--child':
              cmd = "worker";
              break;
            case '-h':
            case '--help':
                abort(usage);
                break;
            case '-I':
            case '--include':
                require.paths.unshift(requireArg('--include'));
                break;
            case '-e':
            case '--eval':
                eval(requireArg('--eval'));
                break;
            case '-p':
            case '--port':
                env.port = parseInt(requireArg('--port'), 10);
                break;
            case '-H':
            case '--host':
                env.host = requireArg('--host');
                break;
            case '-u':
            case '--user':
                env.uid = requireArg('--user');
                break;
            case '-g':
            case '--group':
                env.gid = requireArg('--group');
                break;
            case '-C':
            case '--chdir':
                process.chdir(requireArg('--chdir'));
                break;
            case '-E':
            case '--env':
                env.name = requireArg('--env');
                break;
            case '-M':
            case '--mode':
                env.name = requireArg('--mode');
                break;
            case '--pidfile':
                pidfile = requireArg('--pidfile');
                break;
            case '--accesslog':
                accesslog = requireArg('--accesslog');
                break;
            case '-c':
            case '--config':
                loadConfig(modulePath(requireArg('--config')));
                break;
            case '-v':
            case '--verbose':
                verbose = true;
                break;
            case '-V':
            case '--version':
                showVersion();
                break;
            case '-K':
            case '--no-color':
                useColors = false;
                break;
            case '-n':
            case '--workers':
                workers = parseInt(requireArg('--workers'), 10);
                break;
            case '--ssl-key':
                env.sslKey = fs.readFileSync(requireArg('--ssl-key'), 'ascii');
                break;
            case '--ssl-crt':
                env.sslCrt = fs.readFileSync(requireArg('--ssl-crt'), 'ascii');
                break;
            default:
                if (arg[0] === '-') {
                    arg = arg.substr(2);
                    env[arg] = requireArg('--' + arg);
                } else {
                    env.appPath = modulePath(arg);
                }
        }
    }

    // Run the command

    switch (cmd) {
        case 'worker':
            startWorker();
            break;
        case 'start':
            start();
            break;
    }
}

// Parse cli arguments
parseArguments(process.argv.slice(2), 'start');

